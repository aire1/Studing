// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_demo_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MessagerClient is the client API for Messager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagerClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (Messager_ChatClient, error)
}

type messagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagerClient(cc grpc.ClientConnInterface) MessagerClient {
	return &messagerClient{cc}
}

func (c *messagerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Messager_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messager_serviceDesc.Streams[0], "/example.Messager/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagerChatClient{stream}
	return x, nil
}

type Messager_ChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type messagerChatClient struct {
	grpc.ClientStream
}

func (x *messagerChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagerChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagerServer is the server API for Messager service.
// All implementations must embed UnimplementedMessagerServer
// for forward compatibility
type MessagerServer interface {
	Chat(Messager_ChatServer) error
	mustEmbedUnimplementedMessagerServer()
}

// UnimplementedMessagerServer must be embedded to have forward compatible implementations.
type UnimplementedMessagerServer struct {
}

func (UnimplementedMessagerServer) Chat(Messager_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedMessagerServer) mustEmbedUnimplementedMessagerServer() {}

// UnsafeMessagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagerServer will
// result in compilation errors.
type UnsafeMessagerServer interface {
	mustEmbedUnimplementedMessagerServer()
}

func RegisterMessagerServer(s *grpc.Server, srv MessagerServer) {
	s.RegisterService(&_Messager_serviceDesc, srv)
}

func _Messager_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagerServer).Chat(&messagerChatServer{stream})
}

type Messager_ChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type messagerChatServer struct {
	grpc.ServerStream
}

func (x *messagerChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagerChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Messager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.Messager",
	HandlerType: (*MessagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Messager_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/example.proto",
}
