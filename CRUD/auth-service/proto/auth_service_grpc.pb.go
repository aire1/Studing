// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuthGateClient is the client API for AuthGate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthGateClient interface {
	CheckAuthorization(ctx context.Context, in *AuthCheckRequest, opts ...grpc.CallOption) (*AuthCheckResponse, error)
}

type authGateClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthGateClient(cc grpc.ClientConnInterface) AuthGateClient {
	return &authGateClient{cc}
}

func (c *authGateClient) CheckAuthorization(ctx context.Context, in *AuthCheckRequest, opts ...grpc.CallOption) (*AuthCheckResponse, error) {
	out := new(AuthCheckResponse)
	err := c.cc.Invoke(ctx, "/auth_service.AuthGate/CheckAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthGateServer is the server API for AuthGate service.
// All implementations must embed UnimplementedAuthGateServer
// for forward compatibility
type AuthGateServer interface {
	CheckAuthorization(context.Context, *AuthCheckRequest) (*AuthCheckResponse, error)
	mustEmbedUnimplementedAuthGateServer()
}

// UnimplementedAuthGateServer must be embedded to have forward compatible implementations.
type UnimplementedAuthGateServer struct {
}

func (UnimplementedAuthGateServer) CheckAuthorization(context.Context, *AuthCheckRequest) (*AuthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthorization not implemented")
}
func (UnimplementedAuthGateServer) mustEmbedUnimplementedAuthGateServer() {}

// UnsafeAuthGateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthGateServer will
// result in compilation errors.
type UnsafeAuthGateServer interface {
	mustEmbedUnimplementedAuthGateServer()
}

func RegisterAuthGateServer(s *grpc.Server, srv AuthGateServer) {
	s.RegisterService(&_AuthGate_serviceDesc, srv)
}

func _AuthGate_CheckAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGateServer).CheckAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.AuthGate/CheckAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGateServer).CheckAuthorization(ctx, req.(*AuthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthGate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth_service.AuthGate",
	HandlerType: (*AuthGateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuthorization",
			Handler:    _AuthGate_CheckAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth_service.proto",
}
